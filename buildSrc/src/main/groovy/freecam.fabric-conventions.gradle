plugins {
    id "freecam.java-conventions"
    id "freecam.minecraft-conventions"
    id "com.github.johnrengelman.shadow"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"
    include "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    modImplementation("com.terraformersmc:modmenu:${rootProject.modmenu_version}") {
        exclude module: "fabric-api"
    }

    modApi("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    include "me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_version}"
}

processResources {
    // Passing properties to inputs.properties will mark this task as "up-to-date" when they're unchanged.
    inputs.properties([
            _: project.authors,
            name: project.display_name,
            base_name: project.base_name,
            version: project.version,
            description: project.full_description,
            licence: project.licence,
            homepageURL: project.homepageURL,
            sourceCodeURL: project.sourceCodeURL,
            issueTrackerURL: project.issueTrackerURL,
            fabric_loader_req: project.fabric_loader_req,
            fabric_mc_req: project.fabric_mc_req,
    ])

    // FIXME can't inject an actual list because the json is being parsed somewhere before this gets injected...
    //       (injecting a list would mean our template was invalid JSON)
    def authors = new TreeMap()
    project.authors.split(',').eachWithIndex { author, i -> authors["author$i"] = author }

    filesMatching("fabric.mod.json") {
        expand inputs.properties + authors
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
